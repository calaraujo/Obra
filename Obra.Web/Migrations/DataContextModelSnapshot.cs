// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Obra.Web.Data;

namespace Obra.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Obra.Web.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IbgeCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("StateId");

                    b.Property<int>("State_id");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("CityId");

                    b.Property<int>("City_id");

                    b.Property<string>("Complement")
                        .HasMaxLength(50);

                    b.Property<int?>("CountryId");

                    b.Property<int>("Country_id");

                    b.Property<string>("CountyDocument")
                        .HasMaxLength(20);

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NationalDocument")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("PartnerTypeId");

                    b.Property<int>("PartnerType_id");

                    b.Property<int?>("PersonTypeId");

                    b.Property<int>("PersonType_id");

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<int?>("RegionId");

                    b.Property<int>("Region_id");

                    b.Property<string>("StateDocument")
                        .HasMaxLength(20);

                    b.Property<int?>("StateId");

                    b.Property<int>("State_id");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_Company_Name");

                    b.HasIndex("PartnerTypeId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StateId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.Construction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("CityId");

                    b.Property<int>("City_id");

                    b.Property<int?>("CompanyId");

                    b.Property<int>("Company_Id");

                    b.Property<string>("Complement")
                        .HasMaxLength(50);

                    b.Property<int?>("CountryId");

                    b.Property<int>("Country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("RegionId");

                    b.Property<int>("Region_id");

                    b.Property<int?>("StateId");

                    b.Property<int>("State_id");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_Construction_Name");

                    b.HasIndex("RegionId");

                    b.HasIndex("StateId");

                    b.ToTable("Constructions");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("ConstructionId");

                    b.Property<int>("Construction_id");

                    b.Property<double>("CreditSum");

                    b.Property<double>("DebitSum");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ProfitCenterId");

                    b.Property<int>("ProfitCenter_id");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_CostCenter_Name");

                    b.HasIndex("ProfitCenterId");

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CurrencyId");

                    b.Property<int>("Currency_id");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("RegionId");

                    b.Property<int>("Region_id");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_Country_Name");

                    b.HasIndex("RegionId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_Currency_Name");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.PartnerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_PartnerType_Name");

                    b.ToTable("PartnerTypes");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_PersonType_Name");

                    b.ToTable("PersonTypes");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.ProfitCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("ConstructionId");

                    b.Property<int>("Construction_id");

                    b.Property<double>("CreditSum");

                    b.Property<double>("DebitSum");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_ProfitCenter_Name");

                    b.ToTable("ProfitCenters");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_Region_Name");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId");

                    b.Property<int>("Country_id");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_State_Name");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.City", b =>
                {
                    b.HasOne("Obra.Web.Data.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.Company", b =>
                {
                    b.HasOne("Obra.Web.Data.Entities.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId");

                    b.HasOne("Obra.Web.Data.Entities.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId");

                    b.HasOne("Obra.Web.Data.Entities.PartnerType", "PartnerType")
                        .WithMany("Companies")
                        .HasForeignKey("PartnerTypeId");

                    b.HasOne("Obra.Web.Data.Entities.PersonType", "PersonType")
                        .WithMany("Companies")
                        .HasForeignKey("PersonTypeId");

                    b.HasOne("Obra.Web.Data.Entities.Region", "Region")
                        .WithMany("Companies")
                        .HasForeignKey("RegionId");

                    b.HasOne("Obra.Web.Data.Entities.State", "State")
                        .WithMany("Companies")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.Construction", b =>
                {
                    b.HasOne("Obra.Web.Data.Entities.City", "City")
                        .WithMany("Constructions")
                        .HasForeignKey("CityId");

                    b.HasOne("Obra.Web.Data.Entities.Company", "Company")
                        .WithMany("Constructions")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Obra.Web.Data.Entities.Country", "Country")
                        .WithMany("Constructions")
                        .HasForeignKey("CountryId");

                    b.HasOne("Obra.Web.Data.Entities.Region", "Region")
                        .WithMany("Constructions")
                        .HasForeignKey("RegionId");

                    b.HasOne("Obra.Web.Data.Entities.State", "State")
                        .WithMany("Constructions")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.CostCenter", b =>
                {
                    b.HasOne("Obra.Web.Data.Entities.Construction", "Construction")
                        .WithMany("CostCenters")
                        .HasForeignKey("ConstructionId");

                    b.HasOne("Obra.Web.Data.Entities.ProfitCenter", "ProfitCenter")
                        .WithMany("CostCenters")
                        .HasForeignKey("ProfitCenterId");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.Country", b =>
                {
                    b.HasOne("Obra.Web.Data.Entities.Currency", "Currency")
                        .WithMany("Countries")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Obra.Web.Data.Entities.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.ProfitCenter", b =>
                {
                    b.HasOne("Obra.Web.Data.Entities.Construction", "Construction")
                        .WithMany("ProfitCenters")
                        .HasForeignKey("ConstructionId");
                });

            modelBuilder.Entity("Obra.Web.Data.Entities.State", b =>
                {
                    b.HasOne("Obra.Web.Data.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId");
                });
#pragma warning restore 612, 618
        }
    }
}
